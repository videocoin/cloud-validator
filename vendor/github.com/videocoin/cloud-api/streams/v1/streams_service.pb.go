// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: streams/v1/streams_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateStreamRequest struct {
	Name                 string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" validate:"required,gt=0,lte=255"`
	ProfileId            string     `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty" validate:"required"`
	InputType            InputType  `protobuf:"varint,3,opt,name=input_type,json=inputType,proto3,enum=cloud.api.streams.v1.InputType" json:"input_type,omitempty"`
	OutputType           OutputType `protobuf:"varint,4,opt,name=output_type,json=outputType,proto3,enum=cloud.api.streams.v1.OutputType" json:"output_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateStreamRequest) Reset()         { *m = CreateStreamRequest{} }
func (m *CreateStreamRequest) String() string { return proto.CompactTextString(m) }
func (*CreateStreamRequest) ProtoMessage()    {}
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71adef681a1ecb53, []int{0}
}
func (m *CreateStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStreamRequest.Merge(m, src)
}
func (m *CreateStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStreamRequest proto.InternalMessageInfo

func (m *CreateStreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateStreamRequest) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *CreateStreamRequest) GetInputType() InputType {
	if m != nil {
		return m.InputType
	}
	return InputTypeRTMP
}

func (m *CreateStreamRequest) GetOutputType() OutputType {
	if m != nil {
		return m.OutputType
	}
	return OutputTypeHLS
}

func (*CreateStreamRequest) XXX_MessageName() string {
	return "cloud.api.streams.v1.CreateStreamRequest"
}

type StreamRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71adef681a1ecb53, []int{1}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*StreamRequest) XXX_MessageName() string {
	return "cloud.api.streams.v1.StreamRequest"
}

type UpdateStreamRequest struct {
	Id                    string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" validate:"required,gt=0,lte=255"`
	StreamContractId      uint64       `protobuf:"varint,3,opt,name=stream_contract_id,json=streamContractId,proto3" json:"stream_contract_id,omitempty"`
	StreamContractAddress string       `protobuf:"bytes,4,opt,name=stream_contract_address,json=streamContractAddress,proto3" json:"stream_contract_address,omitempty"`
	Status                StreamStatus `protobuf:"varint,5,opt,name=status,proto3,enum=cloud.api.streams.v1.StreamStatus" json:"status,omitempty"`
	InputStatus           InputStatus  `protobuf:"varint,6,opt,name=input_status,json=inputStatus,proto3,enum=cloud.api.streams.v1.InputStatus" json:"input_status,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}     `json:"-"`
	XXX_unrecognized      []byte       `json:"-"`
	XXX_sizecache         int32        `json:"-"`
}

func (m *UpdateStreamRequest) Reset()         { *m = UpdateStreamRequest{} }
func (m *UpdateStreamRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateStreamRequest) ProtoMessage()    {}
func (*UpdateStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71adef681a1ecb53, []int{2}
}
func (m *UpdateStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStreamRequest.Merge(m, src)
}
func (m *UpdateStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStreamRequest proto.InternalMessageInfo

func (m *UpdateStreamRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateStreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateStreamRequest) GetStreamContractId() uint64 {
	if m != nil {
		return m.StreamContractId
	}
	return 0
}

func (m *UpdateStreamRequest) GetStreamContractAddress() string {
	if m != nil {
		return m.StreamContractAddress
	}
	return ""
}

func (m *UpdateStreamRequest) GetStatus() StreamStatus {
	if m != nil {
		return m.Status
	}
	return StreamStatusNone
}

func (m *UpdateStreamRequest) GetInputStatus() InputStatus {
	if m != nil {
		return m.InputStatus
	}
	return InputStatusNone
}

func (*UpdateStreamRequest) XXX_MessageName() string {
	return "cloud.api.streams.v1.UpdateStreamRequest"
}

type StreamResponse struct {
	Id                    string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OutputUrl             string       `protobuf:"bytes,5,opt,name=output_url,json=outputUrl,proto3" json:"output_url,omitempty"`
	StreamContractId      uint64       `protobuf:"varint,7,opt,name=stream_contract_id,json=streamContractId,proto3" json:"stream_contract_id,omitempty"`
	StreamContractAddress string       `protobuf:"bytes,8,opt,name=stream_contract_address,json=streamContractAddress,proto3" json:"stream_contract_address,omitempty"`
	Status                StreamStatus `protobuf:"varint,9,opt,name=status,proto3,enum=cloud.api.streams.v1.StreamStatus" json:"status,omitempty"`
	InputStatus           InputStatus  `protobuf:"varint,10,opt,name=input_status,json=inputStatus,proto3,enum=cloud.api.streams.v1.InputStatus" json:"input_status,omitempty"`
	CreatedAt             *time.Time   `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt             *time.Time   `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	ReadyAt               *time.Time   `protobuf:"bytes,12,opt,name=ready_at,json=readyAt,proto3,stdtime" json:"ready_at,omitempty"`
	CompletedAt           *time.Time   `protobuf:"bytes,13,opt,name=completed_at,json=completedAt,proto3,stdtime" json:"completed_at,omitempty"`
	RtmpUrl               string       `protobuf:"bytes,14,opt,name=rtmp_url,json=rtmpUrl,proto3" json:"rtmp_url,omitempty"`
	InputType             InputType    `protobuf:"varint,15,opt,name=input_type,json=inputType,proto3,enum=cloud.api.streams.v1.InputType" json:"input_type,omitempty"`
	OutputType            OutputType   `protobuf:"varint,16,opt,name=output_type,json=outputType,proto3,enum=cloud.api.streams.v1.OutputType" json:"output_type,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}     `json:"-"`
	XXX_unrecognized      []byte       `json:"-"`
	XXX_sizecache         int32        `json:"-"`
}

func (m *StreamResponse) Reset()         { *m = StreamResponse{} }
func (m *StreamResponse) String() string { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()    {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_71adef681a1ecb53, []int{3}
}
func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(m, src)
}
func (m *StreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

func (m *StreamResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StreamResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StreamResponse) GetOutputUrl() string {
	if m != nil {
		return m.OutputUrl
	}
	return ""
}

func (m *StreamResponse) GetStreamContractId() uint64 {
	if m != nil {
		return m.StreamContractId
	}
	return 0
}

func (m *StreamResponse) GetStreamContractAddress() string {
	if m != nil {
		return m.StreamContractAddress
	}
	return ""
}

func (m *StreamResponse) GetStatus() StreamStatus {
	if m != nil {
		return m.Status
	}
	return StreamStatusNone
}

func (m *StreamResponse) GetInputStatus() InputStatus {
	if m != nil {
		return m.InputStatus
	}
	return InputStatusNone
}

func (m *StreamResponse) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *StreamResponse) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *StreamResponse) GetReadyAt() *time.Time {
	if m != nil {
		return m.ReadyAt
	}
	return nil
}

func (m *StreamResponse) GetCompletedAt() *time.Time {
	if m != nil {
		return m.CompletedAt
	}
	return nil
}

func (m *StreamResponse) GetRtmpUrl() string {
	if m != nil {
		return m.RtmpUrl
	}
	return ""
}

func (m *StreamResponse) GetInputType() InputType {
	if m != nil {
		return m.InputType
	}
	return InputTypeRTMP
}

func (m *StreamResponse) GetOutputType() OutputType {
	if m != nil {
		return m.OutputType
	}
	return OutputTypeHLS
}

func (*StreamResponse) XXX_MessageName() string {
	return "cloud.api.streams.v1.StreamResponse"
}

type StreamListResponse struct {
	Items                []*StreamResponse `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StreamListResponse) Reset()         { *m = StreamListResponse{} }
func (m *StreamListResponse) String() string { return proto.CompactTextString(m) }
func (*StreamListResponse) ProtoMessage()    {}
func (*StreamListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_71adef681a1ecb53, []int{4}
}
func (m *StreamListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamListResponse.Merge(m, src)
}
func (m *StreamListResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamListResponse proto.InternalMessageInfo

func (m *StreamListResponse) GetItems() []*StreamResponse {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*StreamListResponse) XXX_MessageName() string {
	return "cloud.api.streams.v1.StreamListResponse"
}
func init() {
	proto.RegisterType((*CreateStreamRequest)(nil), "cloud.api.streams.v1.CreateStreamRequest")
	golang_proto.RegisterType((*CreateStreamRequest)(nil), "cloud.api.streams.v1.CreateStreamRequest")
	proto.RegisterType((*StreamRequest)(nil), "cloud.api.streams.v1.StreamRequest")
	golang_proto.RegisterType((*StreamRequest)(nil), "cloud.api.streams.v1.StreamRequest")
	proto.RegisterType((*UpdateStreamRequest)(nil), "cloud.api.streams.v1.UpdateStreamRequest")
	golang_proto.RegisterType((*UpdateStreamRequest)(nil), "cloud.api.streams.v1.UpdateStreamRequest")
	proto.RegisterType((*StreamResponse)(nil), "cloud.api.streams.v1.StreamResponse")
	golang_proto.RegisterType((*StreamResponse)(nil), "cloud.api.streams.v1.StreamResponse")
	proto.RegisterType((*StreamListResponse)(nil), "cloud.api.streams.v1.StreamListResponse")
	golang_proto.RegisterType((*StreamListResponse)(nil), "cloud.api.streams.v1.StreamListResponse")
}

func init() { proto.RegisterFile("streams/v1/streams_service.proto", fileDescriptor_71adef681a1ecb53) }
func init() {
	golang_proto.RegisterFile("streams/v1/streams_service.proto", fileDescriptor_71adef681a1ecb53)
}

var fileDescriptor_71adef681a1ecb53 = []byte{
	// 2332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x6f, 0x1c, 0x49,
	0x15, 0xde, 0x1e, 0x3b, 0x4e, 0x5c, 0x4e, 0xb2, 0xd9, 0x8e, 0x77, 0xe3, 0x78, 0x57, 0x76, 0x6d,
	0x87, 0x25, 0xc6, 0xc4, 0x3d, 0x33, 0x3d, 0x1e, 0x27, 0x9e, 0x65, 0x57, 0x6a, 0x27, 0x51, 0x30,
	0xeb, 0x75, 0xac, 0x9e, 0x71, 0x90, 0x22, 0x24, 0xab, 0xa6, 0xbb, 0x66, 0xa6, 0x92, 0x9e, 0xaa,
	0x4e, 0x57, 0xf5, 0x38, 0xb3, 0x21, 0x1c, 0x90, 0x40, 0x48, 0x1c, 0x40, 0x0d, 0x62, 0x6f, 0x2c,
	0x48, 0x48, 0x08, 0x0e, 0x48, 0x88, 0x0b, 0x20, 0x0e, 0x7b, 0xcc, 0x11, 0xc2, 0x01, 0x0e, 0x28,
	0xa0, 0x2c, 0x7f, 0xc1, 0x1e, 0x39, 0xa1, 0xaa, 0xee, 0x9e, 0x1f, 0xf6, 0xf8, 0x47, 0xb4, 0x7b,
	0xdc, 0xd3, 0x4c, 0x77, 0xbf, 0xf7, 0xbe, 0x57, 0xef, 0x7d, 0xf5, 0xf5, 0xab, 0x06, 0x90, 0x8b,
	0x10, 0xa3, 0x36, 0xcf, 0x77, 0x8a, 0xf9, 0xf4, 0xef, 0x0e, 0xc7, 0x61, 0x87, 0xb8, 0xd8, 0x0c,
	0x42, 0x26, 0x98, 0x3e, 0xed, 0xfa, 0x2c, 0xf2, 0x4c, 0x14, 0x10, 0x33, 0x35, 0x30, 0x3b, 0xc5,
	0xd9, 0xd7, 0x9b, 0x8c, 0x35, 0x7d, 0x9c, 0x57, 0x36, 0xf5, 0xa8, 0x91, 0xc7, 0xed, 0x40, 0x74,
	0x13, 0x97, 0xd9, 0x37, 0xd2, 0x87, 0x28, 0x20, 0x79, 0x44, 0x29, 0x13, 0x48, 0x10, 0x46, 0x79,
	0xfa, 0x74, 0x7e, 0xaf, 0xab, 0x20, 0x6d, 0xcc, 0x05, 0x6a, 0x07, 0xa9, 0xc1, 0x15, 0xf5, 0xe3,
	0x2e, 0x35, 0x31, 0x5d, 0xe2, 0xbb, 0xa8, 0xd9, 0xc4, 0x61, 0x9e, 0x05, 0x2a, 0xc4, 0x88, 0x70,
	0x4b, 0x4d, 0x22, 0x5a, 0x51, 0xdd, 0x74, 0x59, 0x3b, 0xdf, 0x64, 0x4d, 0xd6, 0x8f, 0x2b, 0xaf,
	0xd4, 0x85, 0xfa, 0x97, 0x9a, 0x5f, 0xd8, 0xb7, 0xe0, 0xe4, 0x81, 0xf1, 0xb7, 0x71, 0x70, 0xfe,
	0x7a, 0x88, 0x91, 0xc0, 0x55, 0x75, 0xdb, 0xc1, 0x0f, 0x22, 0xcc, 0x85, 0xfe, 0x7d, 0x0d, 0x8c,
	0x53, 0xd4, 0xc6, 0x33, 0x1a, 0xd4, 0x16, 0x26, 0xd7, 0xc2, 0xd8, 0x7e, 0xcf, 0x5a, 0xdb, 0x44,
	0x6d, 0x0c, 0x59, 0x23, 0xad, 0x1e, 0xac, 0x63, 0x42, 0x9b, 0xd0, 0x55, 0xde, 0x9e, 0x09, 0x37,
	0x30, 0x6d, 0x8a, 0x16, 0x24, 0x1c, 0xd6, 0xb1, 0xd8, 0xc5, 0x98, 0xc2, 0x22, 0x44, 0xd4, 0x83,
	0x56, 0xb9, 0x0c, 0x79, 0xb7, 0x5d, 0x67, 0x3e, 0x37, 0x9f, 0x6a, 0x2a, 0xea, 0xa7, 0xcf, 0xe6,
	0x61, 0x07, 0xf9, 0xc4, 0x43, 0x02, 0x57, 0x8c, 0x10, 0x3f, 0x88, 0x48, 0x88, 0xbd, 0x2b, 0x4d,
	0xf1, 0x4e, 0xe1, 0x8a, 0x2f, 0xf0, 0x3b, 0x56, 0xb9, 0x6c, 0x38, 0xca, 0x52, 0xff, 0x58, 0x03,
	0x20, 0x08, 0x59, 0x83, 0xf8, 0x78, 0x87, 0x78, 0x33, 0x39, 0x95, 0xce, 0x2f, 0xb4, 0xd8, 0xfe,
	0x9e, 0x66, 0x75, 0xd6, 0x6f, 0xc8, 0x74, 0x58, 0x24, 0x82, 0x48, 0x40, 0x11, 0x22, 0xca, 0x5d,
	0xe6, 0xc9, 0xa4, 0x52, 0x0f, 0x28, 0x5a, 0x48, 0xc0, 0x5d, 0xe2, 0xfb, 0xb0, 0x8e, 0x61, 0xc4,
	0xb1, 0x07, 0x05, 0xeb, 0x19, 0xca, 0xc7, 0x18, 0x12, 0xea, 0xb2, 0xb6, 0xf4, 0x49, 0xeb, 0x02,
	0x1d, 0x8c, 0x3c, 0xd8, 0x66, 0x21, 0x86, 0x11, 0xf5, 0x70, 0x08, 0xb7, 0x92, 0x58, 0x1c, 0x72,
	0xec, 0xca, 0x16, 0x98, 0x4f, 0xb5, 0x81, 0x8c, 0x3e, 0x7d, 0x36, 0x7f, 0x7e, 0xff, 0x52, 0x0c,
	0x67, 0x32, 0x35, 0x59, 0xf7, 0xf4, 0x06, 0x00, 0x84, 0x06, 0x91, 0xd8, 0x11, 0xdd, 0x00, 0xcf,
	0x8c, 0x41, 0x6d, 0xe1, 0xac, 0x35, 0x6f, 0x8e, 0x22, 0x98, 0xb9, 0x2e, 0xed, 0x6a, 0xdd, 0x00,
	0xaf, 0x7d, 0x39, 0xb6, 0x2f, 0x59, 0xd3, 0xea, 0x1a, 0x4a, 0xbf, 0x7e, 0xdd, 0x9f, 0x6a, 0x03,
	0xe1, 0x9c, 0x49, 0x92, 0xb9, 0xe8, 0xf7, 0xc1, 0x54, 0x52, 0x8a, 0x04, 0x68, 0x5c, 0x01, 0xc1,
	0xd1, 0x40, 0xb7, 0x95, 0xa1, 0x42, 0x5a, 0x88, 0xed, 0xb7, 0xac, 0x57, 0x6f, 0xa7, 0x45, 0xdc,
	0x03, 0x35, 0x18, 0xd1, 0x01, 0xac, 0xe7, 0x55, 0xb9, 0x18, 0xdb, 0xaf, 0x81, 0xe9, 0xb4, 0x9f,
	0x43, 0x15, 0x31, 0xde, 0x06, 0x67, 0x86, 0xc9, 0x34, 0x07, 0x72, 0xc4, 0x4b, 0x99, 0x74, 0x36,
	0xb6, 0xa7, 0xac, 0xc9, 0xe4, 0x39, 0x5c, 0xbf, 0xe1, 0xe4, 0x88, 0x57, 0x01, 0xb1, 0x7d, 0x12,
	0x9c, 0x78, 0xaa, 0xe5, 0x88, 0x67, 0xfc, 0xe9, 0x04, 0x38, 0xbf, 0x1d, 0x78, 0xfb, 0x08, 0x79,
	0x44, 0x0c, 0xfd, 0x3b, 0x29, 0x5f, 0x13, 0x82, 0xdc, 0x8b, 0xed, 0xeb, 0x96, 0xfd, 0x99, 0xf9,
	0xfa, 0x02, 0x3c, 0xbd, 0x03, 0xf4, 0x04, 0x66, 0xc7, 0x65, 0x54, 0x84, 0xc8, 0x15, 0x92, 0xae,
	0xb2, 0xd9, 0xe3, 0x49, 0x85, 0x2f, 0xf5, 0xf2, 0x85, 0x84, 0xc2, 0x3b, 0xc4, 0xc3, 0xec, 0x3a,
	0x23, 0x34, 0x4b, 0xce, 0x6d, 0x21, 0x42, 0x9d, 0x73, 0xc9, 0xd5, 0xf5, 0x34, 0xc4, 0xba, 0xa7,
	0xd7, 0xc0, 0x85, 0xbd, 0x71, 0x91, 0xe7, 0x85, 0x98, 0x73, 0xd5, 0xe0, 0xc9, 0xb5, 0x37, 0x62,
	0xfb, 0xa2, 0x75, 0x21, 0x0d, 0x9e, 0xd9, 0xc0, 0xd4, 0xc6, 0x79, 0x75, 0x38, 0xa0, 0x9d, 0xdc,
	0xd6, 0x7f, 0xa0, 0x81, 0x09, 0x2e, 0x90, 0x88, 0xf8, 0xcc, 0x09, 0x45, 0x13, 0x63, 0x34, 0x4d,
	0x92, 0xb0, 0x55, 0x65, 0xb9, 0xb6, 0x11, 0xdb, 0xeb, 0xd6, 0xad, 0x5a, 0x0b, 0xc3, 0xc4, 0x55,
	0x96, 0x16, 0x65, 0xf9, 0x13, 0x0e, 0x51, 0xa3, 0x81, 0x5d, 0x81, 0x3d, 0x58, 0xef, 0x42, 0x7b,
	0x6b, 0x1d, 0xba, 0xc8, 0xf7, 0x39, 0x6c, 0x23, 0x0f, 0x43, 0x46, 0xfb, 0x96, 0xac, 0x7e, 0x0f,
	0xbb, 0xc2, 0x49, 0xf1, 0xf5, 0x3f, 0x6b, 0xe0, 0x74, 0xc2, 0xe7, 0x34, 0xa1, 0x09, 0x95, 0xd0,
	0x9b, 0x87, 0x6c, 0x90, 0x34, 0x1f, 0x11, 0xdb, 0x0f, 0x2c, 0x36, 0x3a, 0x9f, 0xcb, 0x1c, 0x12,
	0xda, 0xc4, 0x5c, 0xec, 0x4d, 0x4c, 0xa4, 0xe6, 0x8a, 0x18, 0xf2, 0x02, 0x53, 0x29, 0x05, 0xa1,
	0x92, 0x8a, 0xcb, 0x72, 0x93, 0x53, 0xa5, 0x20, 0x1d, 0xd9, 0x20, 0xe8, 0x21, 0x81, 0x94, 0x64,
	0x28, 0x2f, 0xc5, 0xc7, 0x29, 0xd2, 0x4f, 0xa1, 0x72, 0x3a, 0xb6, 0x27, 0xc1, 0xc9, 0x74, 0x17,
	0x18, 0x3f, 0x3b, 0x0f, 0xce, 0x66, 0xac, 0xe5, 0x01, 0xa3, 0x1c, 0xeb, 0x1b, 0x03, 0xb4, 0xfd,
	0x5a, 0x6c, 0xaf, 0x5a, 0x57, 0xd7, 0x6f, 0x24, 0xaa, 0xd4, 0x67, 0x40, 0xc4, 0x31, 0x97, 0x20,
	0x11, 0x25, 0x0f, 0x22, 0xec, 0x77, 0x21, 0xf1, 0x30, 0x15, 0xa4, 0xd1, 0x85, 0x18, 0xb9, 0xad,
	0x0c, 0x57, 0x92, 0xfc, 0xab, 0x43, 0x24, 0xbf, 0x10, 0xdb, 0xd3, 0x96, 0x9e, 0x91, 0x7c, 0x20,
	0xc5, 0x84, 0x91, 0xeb, 0x20, 0xdd, 0xaf, 0x3b, 0x51, 0xe8, 0xab, 0x36, 0x4f, 0xae, 0x2d, 0xc6,
	0xf6, 0x65, 0xeb, 0xad, 0x6d, 0x05, 0x94, 0xe9, 0xe6, 0xb6, 0xb3, 0xa1, 0xfc, 0x33, 0x55, 0xf4,
	0x92, 0xb5, 0x3b, 0x93, 0xc9, 0xf3, 0xed, 0xd0, 0x3f, 0x80, 0xdc, 0x27, 0x3f, 0x33, 0xb9, 0x7f,
	0xa8, 0x1d, 0xcc, 0xee, 0x53, 0x2a, 0xe1, 0x6a, 0x6c, 0x6f, 0x59, 0x9b, 0x69, 0xf4, 0x16, 0x7e,
	0x98, 0x11, 0x7b, 0x18, 0x46, 0xc5, 0x37, 0xe1, 0x4d, 0xf9, 0x36, 0x86, 0x11, 0x15, 0xc4, 0x1f,
	0xa0, 0x25, 0xa1, 0x30, 0x08, 0x71, 0x80, 0x42, 0xec, 0x25, 0x9d, 0x3f, 0x68, 0x53, 0x90, 0xde,
	0x9e, 0x98, 0x3c, 0xf6, 0x9e, 0x58, 0x8a, 0xed, 0x45, 0x6b, 0xa1, 0xda, 0xe3, 0x5f, 0xbf, 0x0b,
	0x97, 0x39, 0x64, 0x01, 0x0e, 0xd5, 0x5b, 0x1b, 0xf9, 0x29, 0x72, 0x46, 0x7a, 0xba, 0x87, 0xf3,
	0xe0, 0xb8, 0x9c, 0xcf, 0xaa, 0x3d, 0x12, 0x2f, 0xe1, 0x6c, 0xc2, 0xfb, 0x21, 0x9e, 0xea, 0x1d,
	0x00, 0x52, 0xdd, 0xdb, 0x41, 0x62, 0x66, 0x0a, 0x6a, 0x0b, 0x53, 0xd6, 0xac, 0x99, 0x8c, 0x24,
	0x66, 0x36, 0x3a, 0x98, 0xb5, 0x6c, 0x24, 0x59, 0x7b, 0x3b, 0xb6, 0x97, 0x2d, 0xeb, 0x86, 0xdc,
	0x26, 0x52, 0x12, 0xe5, 0xac, 0x22, 0xd1, 0x76, 0x5b, 0xb8, 0xd7, 0xd3, 0x5d, 0x24, 0x4b, 0x4b,
	0x04, 0x41, 0xbe, 0xdf, 0xcd, 0x54, 0xf5, 0xc7, 0xff, 0x9e, 0xd7, 0x9c, 0xc9, 0xf4, 0xc2, 0x16,
	0x7a, 0x17, 0x80, 0x48, 0x89, 0xb9, 0xc2, 0x7d, 0xe5, 0x48, 0xdc, 0x77, 0x63, 0xfb, 0xaa, 0x55,
	0x3e, 0x0c, 0x57, 0x6e, 0x51, 0xb5, 0x7d, 0x25, 0xbe, 0x8f, 0xb8, 0x90, 0xcd, 0xa7, 0xcd, 0x0c,
	0x3a, 0x45, 0xb3, 0x85, 0xfe, 0x0f, 0x0d, 0x9c, 0x0a, 0x31, 0xf2, 0xba, 0x12, 0xf9, 0xf4, 0x91,
	0xc8, 0x1f, 0x69, 0xb1, 0xfd, 0xa1, 0x66, 0xfd, 0x54, 0x3b, 0x02, 0x3c, 0x55, 0x95, 0x16, 0xe2,
	0x30, 0xc4, 0x2e, 0x26, 0x1d, 0xec, 0x29, 0x6b, 0x97, 0xb5, 0x03, 0x1f, 0x4b, 0x91, 0x09, 0x42,
	0xe6, 0x62, 0xce, 0xa5, 0x88, 0xa8, 0x16, 0x0c, 0x48, 0x89, 0x09, 0x6b, 0x2d, 0xc2, 0x61, 0x83,
	0x60, 0xdf, 0xeb, 0x8d, 0x25, 0x34, 0xf2, 0xfd, 0x51, 0xa4, 0x55, 0xc9, 0x27, 0x8b, 0x55, 0x6b,
	0x3b, 0xa9, 0x6e, 0xd8, 0x42, 0xff, 0x83, 0x06, 0x4e, 0xf7, 0xe0, 0xe4, 0xea, 0xce, 0x1c, 0xb9,
	0x3a, 0x11, 0xdb, 0x6d, 0xeb, 0xfe, 0x91, 0xfd, 0x94, 0x8a, 0x9d, 0xcc, 0x48, 0x5c, 0xb0, 0xe0,
	0x85, 0xb2, 0xed, 0xaf, 0xbf, 0x9f, 0xf1, 0x54, 0xef, 0xa6, 0x2d, 0xf4, 0x0f, 0x65, 0x3f, 0x44,
	0x3b, 0x50, 0x6a, 0x74, 0x56, 0x6d, 0xee, 0x6f, 0xc7, 0x76, 0xd7, 0xda, 0x4d, 0xd5, 0x28, 0x2d,
	0xac, 0x53, 0x7b, 0x7f, 0x4b, 0x49, 0x52, 0x83, 0x85, 0x19, 0x82, 0x60, 0x59, 0xad, 0x07, 0x65,
	0xb9, 0x11, 0xb2, 0x76, 0xa6, 0xde, 0x69, 0xaa, 0xd2, 0x8f, 0xf0, 0x64, 0xd0, 0x93, 0xfe, 0x5d,
	0x16, 0x85, 0x7d, 0x81, 0x67, 0x4a, 0xdc, 0x33, 0x4d, 0x77, 0x4e, 0xca, 0x6c, 0xa4, 0xba, 0xbd,
	0x3b, 0x34, 0x9f, 0xbd, 0x7c, 0xac, 0xf9, 0x6c, 0x70, 0xee, 0xb2, 0x87, 0xe7, 0xae, 0x73, 0xc7,
	0x9b, 0xbb, 0x86, 0xa6, 0xa9, 0x7f, 0x4d, 0xc4, 0xf6, 0x3f, 0x27, 0xc0, 0xef, 0x73, 0xd6, 0xef,
	0x72, 0x89, 0xbe, 0x70, 0x88, 0x42, 0x0c, 0x43, 0x1c, 0x84, 0x98, 0x63, 0x9a, 0x0e, 0xff, 0xb2,
	0x67, 0x49, 0x05, 0x04, 0x93, 0xcd, 0xd8, 0x65, 0xe1, 0x7d, 0xec, 0xc9, 0xb7, 0x6b, 0xbd, 0x0b,
	0xdb, 0x84, 0xe2, 0x90, 0xcb, 0x0b, 0x29, 0x0a, 0x7d, 0x71, 0xdc, 0xc4, 0x42, 0xda, 0xa9, 0xc6,
	0xa7, 0x92, 0xef, 0x32, 0xca, 0xa3, 0x36, 0xaa, 0xfb, 0x59, 0x41, 0xeb, 0x88, 0x27, 0x71, 0xa4,
	0xeb, 0xa8, 0x41, 0xba, 0x49, 0x3a, 0x98, 0x42, 0x24, 0x92, 0x8d, 0x2e, 0xa7, 0x60, 0x98, 0xe5,
	0xe9, 0x46, 0x61, 0x88, 0xa9, 0xf0, 0xbb, 0x90, 0x51, 0xbf, 0x0b, 0x79, 0x14, 0x04, 0x2c, 0x14,
	0x3d, 0x31, 0x92, 0x78, 0xac, 0x83, 0x43, 0xd5, 0x59, 0x13, 0x56, 0xd3, 0xc7, 0xb2, 0x3d, 0x83,
	0xdb, 0x23, 0x35, 0xa9, 0x6e, 0xa9, 0x3c, 0xbf, 0xbe, 0x51, 0xed, 0x31, 0x4e, 0x26, 0x4b, 0x3c,
	0x2c, 0xe5, 0x9b, 0x50, 0xd8, 0x88, 0x44, 0xa4, 0x0a, 0xe3, 0x63, 0xc4, 0x31, 0x37, 0xad, 0x5f,
	0x8e, 0xeb, 0x3f, 0x1f, 0x7f, 0x04, 0x0d, 0xe2, 0x19, 0x15, 0x68, 0x2c, 0xa3, 0xa2, 0x5b, 0x5a,
	0xbd, 0x5a, 0x5a, 0xba, 0xe6, 0x36, 0x56, 0x96, 0x96, 0x57, 0x51, 0x63, 0x69, 0x19, 0x95, 0x57,
	0x96, 0xae, 0xa2, 0xa2, 0xb7, 0xbc, 0xea, 0x5a, 0x75, 0xe4, 0xae, 0x18, 0x57, 0xa0, 0xa1, 0xde,
	0xd7, 0x15, 0x68, 0x6c, 0x90, 0x0e, 0x96, 0xd7, 0xfd, 0x37, 0xa5, 0xbc, 0xdb, 0x12, 0x22, 0xe0,
	0x95, 0x7c, 0xbe, 0xd7, 0x38, 0x99, 0xa2, 0xcb, 0x08, 0x35, 0x69, 0x52, 0xcc, 0xfc, 0x71, 0x70,
	0xf2, 0x84, 0x7a, 0xf8, 0xa1, 0xd9, 0x2e, 0x45, 0xd7, 0x24, 0xc4, 0xfe, 0x37, 0xa8, 0x84, 0xb2,
	0xae, 0x96, 0xaf, 0x95, 0xca, 0x05, 0xab, 0x5c, 0xb4, 0x0a, 0x85, 0x95, 0x62, 0xa1, 0x50, 0x2a,
	0x8c, 0x32, 0x4e, 0x5f, 0x7b, 0xd2, 0x23, 0x79, 0x2c, 0x65, 0x5d, 0x5e, 0x55, 0x6b, 0xce, 0x4d,
	0xfb, 0xfd, 0x9d, 0x6a, 0xcd, 0xae, 0x6d, 0x57, 0x77, 0x36, 0x6f, 0x7e, 0x53, 0x3e, 0x1e, 0x7c,
	0xb7, 0x48, 0xa3, 0xf5, 0xcd, 0xad, 0xed, 0x5a, 0xcf, 0xe6, 0xf6, 0xe6, 0x4d, 0x69, 0xd4, 0x7f,
	0x21, 0xa8, 0x3c, 0x0a, 0xc5, 0xd5, 0xa5, 0x62, 0x71, 0xa9, 0xb0, 0x52, 0x2b, 0xae, 0x56, 0x4a,
	0xc5, 0x4a, 0xa1, 0x64, 0x16, 0xca, 0xab, 0xcb, 0x85, 0x6b, 0x56, 0xa9, 0x7c, 0x57, 0xda, 0xf7,
	0x85, 0xfc, 0x30, 0xfb, 0x95, 0xc2, 0x72, 0xa9, 0xa0, 0xec, 0x33, 0xf1, 0x35, 0x2a, 0x4a, 0x34,
	0x24, 0xe2, 0x80, 0x68, 0xf5, 0xef, 0x66, 0xa2, 0x20, 0xa3, 0xca, 0xff, 0x95, 0x7c, 0x5e, 0xfe,
	0x98, 0x5c, 0x44, 0x1e, 0x61, 0xfb, 0x6b, 0x5f, 0x29, 0xae, 0x96, 0xca, 0x79, 0x9f, 0x74, 0xf0,
	0xb1, 0xba, 0x60, 0xc0, 0xc7, 0xc6, 0x8f, 0x4e, 0x00, 0x3d, 0xa1, 0xeb, 0x06, 0xe1, 0xa2, 0x37,
	0x9c, 0x55, 0xc0, 0x09, 0x22, 0x70, 0x9b, 0xcf, 0x68, 0x70, 0x6c, 0x61, 0xca, 0xfa, 0xd2, 0x61,
	0xef, 0xfb, 0xcc, 0xc9, 0x49, 0x5c, 0x2a, 0x7f, 0x19, 0x8f, 0xed, 0x3f, 0x8e, 0x03, 0xdd, 0x3a,
	0x27, 0x43, 0xf6, 0x4f, 0x19, 0x5f, 0x30, 0xf2, 0x0b, 0x46, 0x1e, 0xcd, 0x48, 0xeb, 0x37, 0xa7,
	0xb2, 0x43, 0x72, 0x35, 0xf9, 0xee, 0xa4, 0xff, 0x2a, 0x07, 0x26, 0x92, 0x2f, 0x31, 0xfa, 0x57,
	0x46, 0x13, 0x71, 0xc4, 0x77, 0x9a, 0xd9, 0x63, 0x71, 0xd6, 0x78, 0xa2, 0xc5, 0xf6, 0x6f, 0xb5,
	0x6f, 0xfc, 0x5a, 0x03, 0x63, 0xcb, 0x85, 0x82, 0xfe, 0x91, 0x06, 0x6e, 0x66, 0x23, 0x35, 0x92,
	0xc7, 0x5f, 0x4c, 0x61, 0x03, 0x91, 0xf4, 0xd5, 0x9f, 0x74, 0x01, 0xd6, 0xb1, 0x8b, 0x22, 0x8e,
	0x21, 0x82, 0xd9, 0xb9, 0x37, 0x9d, 0x04, 0x08, 0x87, 0x6d, 0xa2, 0xe6, 0x1b, 0x53, 0xbf, 0x63,
	0xd5, 0x74, 0xe7, 0x11, 0x34, 0xda, 0x98, 0x73, 0xd4, 0x54, 0xfc, 0x25, 0x54, 0x9d, 0x98, 0x21,
	0x0a, 0x9b, 0x51, 0x1b, 0x53, 0x21, 0x0b, 0xaf, 0x1c, 0x65, 0xdf, 0x1f, 0xf5, 0x79, 0xae, 0xce,
	0x2d, 0xf2, 0x70, 0xb6, 0x27, 0xbe, 0x01, 0x1f, 0x3f, 0xfe, 0xee, 0xdf, 0xff, 0xfb, 0x93, 0xdc,
	0xb4, 0xf1, 0xb2, 0xfa, 0x96, 0xd6, 0xff, 0x46, 0x57, 0xd1, 0x16, 0x75, 0x0a, 0xc6, 0x6e, 0x61,
	0xa1, 0x5f, 0x3a, 0x7c, 0xdd, 0x2f, 0x52, 0x9c, 0x37, 0x14, 0xda, 0x6b, 0xfa, 0xf4, 0x1e, 0xb4,
	0xfc, 0x23, 0xe2, 0x3d, 0xd6, 0x5d, 0x30, 0x71, 0x03, 0x4b, 0x8a, 0x1c, 0x0f, 0xf2, 0xb5, 0x7d,
	0x43, 0x98, 0x3a, 0x94, 0x64, 0x20, 0x8b, 0xa3, 0x41, 0x10, 0x18, 0x97, 0x2a, 0xa2, 0x1f, 0xe0,
	0x3d, 0xbb, 0x70, 0x18, 0xf4, 0xa0, 0xa4, 0x19, 0x17, 0x14, 0xce, 0x2b, 0xfa, 0xde, 0xd2, 0xe9,
	0x1f, 0x80, 0x89, 0xe4, 0xb3, 0xca, 0x41, 0xec, 0x1a, 0xf1, 0xd1, 0xe5, 0x98, 0x05, 0x9c, 0x57,
	0x98, 0x17, 0x67, 0x47, 0xae, 0x4d, 0xf6, 0xac, 0x0a, 0x4e, 0x67, 0xd1, 0xd5, 0x69, 0xe4, 0x05,
	0x32, 0x38, 0xa8, 0x9e, 0x2f, 0xe9, 0x21, 0x18, 0x73, 0x22, 0xfa, 0x79, 0x12, 0x01, 0xaa, 0x75,
	0xcc, 0x1a, 0x33, 0xa3, 0xd6, 0x91, 0x0f, 0x23, 0xaa, 0x0b, 0x30, 0x5e, 0x15, 0x2c, 0xf8, 0x3c,
	0x41, 0xdf, 0x54, 0xa0, 0xaf, 0x1b, 0x17, 0x47, 0x82, 0xca, 0x31, 0x7c, 0xed, 0x7f, 0xb9, 0xd8,
	0x7e, 0x96, 0xd3, 0xa7, 0xc1, 0x99, 0x3b, 0x99, 0xf2, 0x40, 0x14, 0x10, 0x6b, 0xac, 0x68, 0x16,
	0x16, 0xb5, 0x9c, 0x75, 0x0e, 0x05, 0x81, 0x4f, 0x5c, 0x35, 0x96, 0xe5, 0xef, 0x71, 0x46, 0x2b,
	0xfb, 0xee, 0x38, 0x45, 0xb9, 0xf3, 0x8b, 0xfa, 0x22, 0x58, 0x70, 0xb0, 0x88, 0x42, 0x8a, 0xbd,
	0x64, 0xf8, 0x97, 0xf3, 0x5e, 0xc4, 0x71, 0x28, 0x77, 0x22, 0x65, 0x02, 0xfa, 0xac, 0xd9, 0x54,
	0x83, 0x96, 0xe9, 0x6c, 0x49, 0x97, 0x92, 0xbe, 0x0e, 0x6e, 0x1d, 0xe0, 0xe2, 0x31, 0x9c, 0x38,
	0xb5, 0x50, 0x07, 0xc3, 0x00, 0x87, 0x4a, 0x16, 0xe4, 0x10, 0xc9, 0x20, 0x72, 0xe5, 0x19, 0x48,
	0xd9, 0x86, 0x98, 0xb3, 0x28, 0x74, 0xb1, 0xe9, 0xb8, 0x32, 0xe2, 0xb2, 0xfe, 0x2d, 0xb0, 0xb8,
	0x3f, 0x62, 0x66, 0xd5, 0x8f, 0x8a, 0x1f, 0x12, 0x2e, 0x4c, 0xdd, 0xb4, 0xae, 0xe8, 0x8b, 0xc3,
	0x12, 0xb3, 0xc9, 0xe4, 0xfc, 0x18, 0x51, 0x6f, 0x48, 0x5b, 0xd4, 0xc9, 0xe4, 0xf1, 0xdd, 0x4b,
	0xe0, 0x4d, 0x00, 0xec, 0x80, 0xbc, 0x87, 0xbb, 0x76, 0x24, 0x5a, 0xfa, 0xf9, 0x53, 0xb9, 0xd9,
	0x33, 0xf2, 0x1f, 0x0b, 0xc9, 0x07, 0xaa, 0x22, 0x30, 0x57, 0x3f, 0x07, 0xce, 0x0e, 0x19, 0xbd,
	0xf4, 0xe4, 0xf9, 0x9c, 0xf6, 0xd7, 0xe7, 0x73, 0xda, 0x7f, 0x9e, 0xcf, 0x69, 0x1f, 0x7f, 0x32,
	0xa7, 0x3d, 0xf9, 0x64, 0x4e, 0xbb, 0x9b, 0xeb, 0x14, 0xeb, 0x13, 0x8a, 0x78, 0xa5, 0xff, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x72, 0x70, 0x9e, 0xcc, 0x33, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamServiceClient interface {
	// This API call creates a new stream with the specified name and output transcoding profile. A stream object is returned from this API call.
	Create(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*StreamResponse, error)
	// This API call gets the details of the stream associated with the ID passed. The stream must belong to the account specified
	Get(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error)
	// This API call deletes the stream with the specified ID.
	Delete(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// This API call gets all streams that belongs to a specific account.
	List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*StreamListResponse, error)
	// This API call modify the stream with the specified ID.
	Update(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*StreamResponse, error)
	UpdateStatus(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// This API call transitions a newly created stream to begin preparing input and output destinations.
	Run(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error)
	// This API call stops or cancels a stream based on its input and output destination state.
	Stop(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Create(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*StreamResponse, error) {
	out := new(StreamResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Get(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error) {
	out := new(StreamResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Delete(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*StreamListResponse, error) {
	out := new(StreamListResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Update(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*StreamResponse, error) {
	out := new(StreamResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) UpdateStatus(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Run(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error) {
	out := new(StreamResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Stop(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error) {
	out := new(StreamResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamServiceServer is the server API for StreamService service.
type StreamServiceServer interface {
	// This API call creates a new stream with the specified name and output transcoding profile. A stream object is returned from this API call.
	Create(context.Context, *CreateStreamRequest) (*StreamResponse, error)
	// This API call gets the details of the stream associated with the ID passed. The stream must belong to the account specified
	Get(context.Context, *StreamRequest) (*StreamResponse, error)
	// This API call deletes the stream with the specified ID.
	Delete(context.Context, *StreamRequest) (*types.Empty, error)
	// This API call gets all streams that belongs to a specific account.
	List(context.Context, *types.Empty) (*StreamListResponse, error)
	// This API call modify the stream with the specified ID.
	Update(context.Context, *UpdateStreamRequest) (*StreamResponse, error)
	UpdateStatus(context.Context, *UpdateStreamRequest) (*types.Empty, error)
	// This API call transitions a newly created stream to begin preparing input and output destinations.
	Run(context.Context, *StreamRequest) (*StreamResponse, error)
	// This API call stops or cancels a stream based on its input and output destination state.
	Stop(context.Context, *StreamRequest) (*StreamResponse, error)
}

// UnimplementedStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (*UnimplementedStreamServiceServer) Create(ctx context.Context, req *CreateStreamRequest) (*StreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedStreamServiceServer) Get(ctx context.Context, req *StreamRequest) (*StreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedStreamServiceServer) Delete(ctx context.Context, req *StreamRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedStreamServiceServer) List(ctx context.Context, req *types.Empty) (*StreamListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedStreamServiceServer) Update(ctx context.Context, req *UpdateStreamRequest) (*StreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedStreamServiceServer) UpdateStatus(ctx context.Context, req *UpdateStreamRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (*UnimplementedStreamServiceServer) Run(ctx context.Context, req *StreamRequest) (*StreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (*UnimplementedStreamServiceServer) Stop(ctx context.Context, req *StreamRequest) (*StreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Create(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Get(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Delete(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).List(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Update(ctx, req.(*UpdateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).UpdateStatus(ctx, req.(*UpdateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Run(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Stop(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.streams.v1.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StreamService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StreamService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StreamService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _StreamService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StreamService_Update_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _StreamService_UpdateStatus_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _StreamService_Run_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _StreamService_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "streams/v1/streams_service.proto",
}

func (m *CreateStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutputType != 0 {
		i = encodeVarintStreamsService(dAtA, i, uint64(m.OutputType))
		i--
		dAtA[i] = 0x20
	}
	if m.InputType != 0 {
		i = encodeVarintStreamsService(dAtA, i, uint64(m.InputType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProfileId) > 0 {
		i -= len(m.ProfileId)
		copy(dAtA[i:], m.ProfileId)
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.ProfileId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InputStatus != 0 {
		i = encodeVarintStreamsService(dAtA, i, uint64(m.InputStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintStreamsService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.StreamContractAddress) > 0 {
		i -= len(m.StreamContractAddress)
		copy(dAtA[i:], m.StreamContractAddress)
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.StreamContractAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.StreamContractId != 0 {
		i = encodeVarintStreamsService(dAtA, i, uint64(m.StreamContractId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintStreamsService(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.OutputType != 0 {
		i = encodeVarintStreamsService(dAtA, i, uint64(m.OutputType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.InputType != 0 {
		i = encodeVarintStreamsService(dAtA, i, uint64(m.InputType))
		i--
		dAtA[i] = 0x78
	}
	if len(m.RtmpUrl) > 0 {
		i -= len(m.RtmpUrl)
		copy(dAtA[i:], m.RtmpUrl)
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.RtmpUrl)))
		i--
		dAtA[i] = 0x72
	}
	if m.CompletedAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CompletedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CompletedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintStreamsService(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x6a
	}
	if m.ReadyAt != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ReadyAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReadyAt):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintStreamsService(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x62
	}
	if m.CreatedAt != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintStreamsService(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x5a
	}
	if m.InputStatus != 0 {
		i = encodeVarintStreamsService(dAtA, i, uint64(m.InputStatus))
		i--
		dAtA[i] = 0x50
	}
	if m.Status != 0 {
		i = encodeVarintStreamsService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if len(m.StreamContractAddress) > 0 {
		i -= len(m.StreamContractAddress)
		copy(dAtA[i:], m.StreamContractAddress)
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.StreamContractAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.StreamContractId != 0 {
		i = encodeVarintStreamsService(dAtA, i, uint64(m.StreamContractId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.OutputUrl) > 0 {
		i -= len(m.OutputUrl)
		copy(dAtA[i:], m.OutputUrl)
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.OutputUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStreamsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStreamsService(dAtA []byte, offset int, v uint64) int {
	offset -= sovStreamsService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.InputType != 0 {
		n += 1 + sovStreamsService(uint64(m.InputType))
	}
	if m.OutputType != 0 {
		n += 1 + sovStreamsService(uint64(m.OutputType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.StreamContractId != 0 {
		n += 1 + sovStreamsService(uint64(m.StreamContractId))
	}
	l = len(m.StreamContractAddress)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovStreamsService(uint64(m.Status))
	}
	if m.InputStatus != 0 {
		n += 1 + sovStreamsService(uint64(m.InputStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	l = len(m.OutputUrl)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.StreamContractId != 0 {
		n += 1 + sovStreamsService(uint64(m.StreamContractId))
	}
	l = len(m.StreamContractAddress)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovStreamsService(uint64(m.Status))
	}
	if m.InputStatus != 0 {
		n += 1 + sovStreamsService(uint64(m.InputStatus))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.ReadyAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReadyAt)
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.CompletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CompletedAt)
		n += 1 + l + sovStreamsService(uint64(l))
	}
	l = len(m.RtmpUrl)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.InputType != 0 {
		n += 1 + sovStreamsService(uint64(m.InputType))
	}
	if m.OutputType != 0 {
		n += 2 + sovStreamsService(uint64(m.OutputType))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 2 + l + sovStreamsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovStreamsService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStreamsService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStreamsService(x uint64) (n int) {
	return sovStreamsService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputType", wireType)
			}
			m.InputType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputType |= InputType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputType", wireType)
			}
			m.OutputType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputType |= OutputType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStreamsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamsService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStreamsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreamsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamsService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStreamsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractId", wireType)
			}
			m.StreamContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StreamStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStatus", wireType)
			}
			m.InputStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputStatus |= InputStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStreamsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamsService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStreamsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractId", wireType)
			}
			m.StreamContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StreamStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStatus", wireType)
			}
			m.InputStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputStatus |= InputStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadyAt == nil {
				m.ReadyAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ReadyAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedAt == nil {
				m.CompletedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CompletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RtmpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RtmpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputType", wireType)
			}
			m.InputType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputType |= InputType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputType", wireType)
			}
			m.OutputType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputType |= OutputType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreamsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamsService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStreamsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &StreamResponse{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreamsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamsService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStreamsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStreamsService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStreamsService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStreamsService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStreamsService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStreamsService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStreamsService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStreamsService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStreamsService = fmt.Errorf("proto: unexpected end of group")
)
