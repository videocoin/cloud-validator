// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validator/v1/validator_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	rpc "github.com/videocoin/cloud-api/rpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidateProofRequest struct {
	StreamContractAddress string   `protobuf:"bytes,1,opt,name=stream_contract_address,json=streamContractAddress,proto3" json:"stream_contract_address,omitempty"`
	ProfileId             []byte   `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	InputChunkUrl         string   `protobuf:"bytes,3,opt,name=input_chunk_url,json=inputChunkUrl,proto3" json:"input_chunk_url,omitempty"`
	OutputChunkUrl        string   `protobuf:"bytes,4,opt,name=output_chunk_url,json=outputChunkUrl,proto3" json:"output_chunk_url,omitempty"`
	OutputChunkId         []byte   `protobuf:"bytes,5,opt,name=output_chunk_id,json=outputChunkId,proto3" json:"output_chunk_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ValidateProofRequest) Reset()         { *m = ValidateProofRequest{} }
func (m *ValidateProofRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateProofRequest) ProtoMessage()    {}
func (*ValidateProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b1a82488864da9d, []int{0}
}
func (m *ValidateProofRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateProofRequest.Unmarshal(m, b)
}
func (m *ValidateProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateProofRequest.Marshal(b, m, deterministic)
}
func (m *ValidateProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateProofRequest.Merge(m, src)
}
func (m *ValidateProofRequest) XXX_Size() int {
	return xxx_messageInfo_ValidateProofRequest.Size(m)
}
func (m *ValidateProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateProofRequest proto.InternalMessageInfo

func (m *ValidateProofRequest) GetStreamContractAddress() string {
	if m != nil {
		return m.StreamContractAddress
	}
	return ""
}

func (m *ValidateProofRequest) GetProfileId() []byte {
	if m != nil {
		return m.ProfileId
	}
	return nil
}

func (m *ValidateProofRequest) GetInputChunkUrl() string {
	if m != nil {
		return m.InputChunkUrl
	}
	return ""
}

func (m *ValidateProofRequest) GetOutputChunkUrl() string {
	if m != nil {
		return m.OutputChunkUrl
	}
	return ""
}

func (m *ValidateProofRequest) GetOutputChunkId() []byte {
	if m != nil {
		return m.OutputChunkId
	}
	return nil
}

func init() {
	proto.RegisterType((*ValidateProofRequest)(nil), "cloud.api.validator.v1.ValidateProofRequest")
}

func init() {
	proto.RegisterFile("validator/v1/validator_service.proto", fileDescriptor_5b1a82488864da9d)
}

var fileDescriptor_5b1a82488864da9d = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xd1, 0x8a, 0xd4, 0x30,
	0x18, 0x85, 0xdb, 0x51, 0x17, 0x37, 0x38, 0x6e, 0x09, 0xba, 0x96, 0xae, 0x0e, 0xcb, 0x20, 0xcb,
	0x5c, 0xb8, 0x09, 0xa3, 0xe0, 0xbd, 0x2e, 0x82, 0x7b, 0xa5, 0xcc, 0xe2, 0x0a, 0xde, 0x94, 0x4c,
	0x92, 0x69, 0x83, 0x9d, 0xfe, 0x31, 0x4d, 0x0a, 0x7a, 0xe9, 0x2b, 0xf8, 0x3a, 0x3e, 0x80, 0x97,
	0x82, 0x2f, 0x20, 0x83, 0xe0, 0x6b, 0x48, 0x93, 0xee, 0xec, 0x0c, 0x8c, 0x77, 0xfd, 0xcf, 0xf9,
	0x92, 0xfc, 0x9c, 0x53, 0xf4, 0xb8, 0x65, 0x95, 0x12, 0xcc, 0x82, 0xa1, 0xed, 0x94, 0xae, 0x87,
	0xbc, 0x91, 0xa6, 0x55, 0x5c, 0x12, 0x6d, 0xc0, 0x02, 0x3e, 0xe4, 0x15, 0x38, 0x41, 0x98, 0x56,
	0x64, 0x8d, 0x90, 0x76, 0x9a, 0x1d, 0x15, 0x00, 0x45, 0x25, 0xa9, 0xa7, 0xe6, 0x6e, 0x41, 0xe5,
	0x52, 0xdb, 0xcf, 0xe1, 0x50, 0xf6, 0xb0, 0x37, 0x99, 0x56, 0x94, 0xd5, 0x35, 0x58, 0x66, 0x15,
	0xd4, 0x4d, 0xef, 0x9e, 0x16, 0xca, 0x96, 0x6e, 0x4e, 0x38, 0x2c, 0x69, 0x01, 0x05, 0x5c, 0xdf,
	0xd1, 0x4d, 0x7e, 0xf0, 0x5f, 0x3d, 0x4e, 0x37, 0xf0, 0x56, 0x09, 0x09, 0x1c, 0x54, 0x4d, 0xfd,
	0x5a, 0xa7, 0xdd, 0x03, 0x46, 0x73, 0x5a, 0x4a, 0x56, 0xd9, 0x32, 0x1c, 0x18, 0xff, 0x8d, 0xd1,
	0xbd, 0xcb, 0xb0, 0xab, 0x7c, 0x6b, 0x00, 0x16, 0x33, 0xf9, 0xc9, 0xc9, 0xc6, 0xe2, 0xe7, 0xe8,
	0x41, 0x63, 0x8d, 0x64, 0xcb, 0x9c, 0x43, 0x6d, 0x0d, 0xe3, 0x36, 0x67, 0x42, 0x18, 0xd9, 0x34,
	0x69, 0x7c, 0x1c, 0x4f, 0xf6, 0x67, 0xf7, 0x83, 0x7d, 0xd6, 0xbb, 0x2f, 0x82, 0x89, 0x1f, 0x21,
	0xa4, 0x0d, 0x2c, 0x54, 0x25, 0x73, 0x25, 0xd2, 0xc1, 0x71, 0x3c, 0xb9, 0x33, 0xdb, 0xef, 0x95,
	0x73, 0x81, 0x4f, 0xd0, 0x81, 0xaa, 0xb5, 0xb3, 0x39, 0x2f, 0x5d, 0xfd, 0x31, 0x77, 0xa6, 0x4a,
	0x6f, 0xf8, 0xeb, 0x86, 0x5e, 0x3e, 0xeb, 0xd4, 0x77, 0xa6, 0xc2, 0x13, 0x94, 0x80, 0xb3, 0xdb,
	0xe0, 0x4d, 0x0f, 0xde, 0x0d, 0xfa, 0x9a, 0x3c, 0x41, 0x07, 0x5b, 0xa4, 0x12, 0xe9, 0x2d, 0xff,
	0xea, 0x70, 0x03, 0x3c, 0x17, 0x4f, 0xbf, 0xc7, 0x28, 0xb9, 0xbc, 0x6a, 0xe5, 0x22, 0xf4, 0x86,
	0xdf, 0xa0, 0xbd, 0xd7, 0x3e, 0x0e, 0x7c, 0x48, 0x42, 0x0f, 0xe4, 0x2a, 0x60, 0xf2, 0xaa, 0x2b,
	0x29, 0x3b, 0x22, 0xd7, 0xa5, 0x1a, 0xcd, 0x49, 0xc0, 0x2f, 0x2c, 0xb3, 0xae, 0x19, 0x27, 0x5f,
	0x7f, 0xfd, 0xf9, 0x36, 0x40, 0xf8, 0x76, 0x1f, 0xea, 0x17, 0xfc, 0x1e, 0x0d, 0xb7, 0xe2, 0xc4,
	0x4f, 0xc8, 0xee, 0x9f, 0x82, 0xec, 0x4a, 0x3d, 0xfb, 0xcf, 0x16, 0xe3, 0xe8, 0x65, 0xf2, 0x63,
	0x35, 0x8a, 0x7e, 0xae, 0x46, 0xd1, 0xef, 0xd5, 0x28, 0xfa, 0x30, 0x68, 0xa7, 0xf3, 0x3d, 0xcf,
	0x3c, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xec, 0x64, 0x3b, 0x9c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ValidatorServiceClient is the client API for ValidatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ValidatorServiceClient interface {
	Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
	ValidateProof(ctx context.Context, in *ValidateProofRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type validatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewValidatorServiceClient(cc *grpc.ClientConn) ValidatorServiceClient {
	return &validatorServiceClient{cc}
}

func (c *validatorServiceClient) Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/cloud.api.validator.v1.ValidatorService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidateProof(ctx context.Context, in *ValidateProofRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.validator.v1.ValidatorService/ValidateProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidatorServiceServer is the server API for ValidatorService service.
type ValidatorServiceServer interface {
	Health(context.Context, *types.Empty) (*rpc.HealthStatus, error)
	ValidateProof(context.Context, *ValidateProofRequest) (*types.Empty, error)
}

// UnimplementedValidatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedValidatorServiceServer struct {
}

func (*UnimplementedValidatorServiceServer) Health(ctx context.Context, req *types.Empty) (*rpc.HealthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedValidatorServiceServer) ValidateProof(ctx context.Context, req *ValidateProofRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateProof not implemented")
}

func RegisterValidatorServiceServer(s *grpc.Server, srv ValidatorServiceServer) {
	s.RegisterService(&_ValidatorService_serviceDesc, srv)
}

func _ValidatorService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.validator.v1.ValidatorService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).Health(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidateProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidateProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.validator.v1.ValidatorService/ValidateProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidateProof(ctx, req.(*ValidateProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ValidatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.validator.v1.ValidatorService",
	HandlerType: (*ValidatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _ValidatorService_Health_Handler,
		},
		{
			MethodName: "ValidateProof",
			Handler:    _ValidatorService_ValidateProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validator/v1/validator_service.proto",
}
